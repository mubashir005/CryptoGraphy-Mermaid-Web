{"version":3,"file":"component---src-pages-index-js-1ca3342e012f82000a18.js","mappings":"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","sources":["webpack://cryptography-website/./src/components/InfoBox.js","webpack://cryptography-website/./src/components/Navbar.js","webpack://cryptography-website/./src/pages/index.js"],"sourcesContent":["import React from \"react\";\r\nimport  \"../styles/global.css\"\r\n\r\nconst InfoBox = ({ info }) => {\r\n  return (\r\n    <div\r\n      className=\"info-box\"\r\n      id=\"info-box\"\r\n      style={{\r\n        display: info.title ? \"block\" : \"none\",\r\n      }}\r\n    >\r\n      <h4>{info.title}</h4>\r\n      <p>{info.text}</p>\r\n      <p style={{ fontSize: \"12px\", color: \"#6c757d\" }}>\r\n        <a href={info.link} style={{ color: \"#007bff\" }}>\r\n          Click for more details\r\n        </a>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InfoBox;\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"gatsby\";\r\nimport \"../styles/global.css\";\r\n\r\nconst Navbar = () => {\r\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n\r\n  const toggleDropdown = () => {\r\n    setIsDropdownOpen(!isDropdownOpen);\r\n  };\r\n\r\n  return (\r\n    <div className=\"top-menu\">\r\n      <div className=\"menu-items\">\r\n        <Link to=\"/\" className=\"menu-item\">Home</Link>\r\n        <div\r\n          className=\"menu-item dropdown\"\r\n          onMouseEnter={() => setIsDropdownOpen(true)}\r\n          onMouseLeave={() => setIsDropdownOpen(false)}\r\n        >\r\n          Topics\r\n          <div className={`dropdown-content ${isDropdownOpen ? \"open\" : \"\"}`}>\r\n            <Link to=\"/chapter-1\" className=\"dropdown-item\">Main Flow Chart</Link>\r\n            <Link to=\"/chapter-1\" className=\"dropdown-item\">Chapter 1</Link>\r\n            <Link to=\"/chapter-1\" className=\"dropdown-item\">Chapter 2</Link>\r\n            <Link to=\"/chapter-3\" className=\"dropdown-item\">Chapter 3</Link>\r\n            <Link to=\"/chapter-4\" className=\"dropdown-item\">Chapter 4</Link>\r\n            <Link to=\"/chapter-5\" className=\"dropdown-item\">Chapter 5</Link>\r\n            <Link to=\"/chapter-6\" className=\"dropdown-item\">Chapter 6</Link>\r\n            <Link to=\"/chapter-1\" className=\"dropdown-item\">Chapter 7</Link>\r\n            <Link to=\"/chapter-1\" className=\"dropdown-item\">Chapter 8</Link>\r\n            <Link to=\"/chapter-1\" className=\"dropdown-item\">Chapter 9</Link>\r\n          </div>\r\n        </div>\r\n        <Link to=\"/examples\" className=\"menu-item\">Examples</Link>\r\n        <Link to=\"/about\" className=\"menu-item\">About</Link>\r\n        <Link to=\"/contact\" className=\"menu-item\">Contact</Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport { graphql } from \"gatsby\";\r\nimport { useLocation } from \"@reach/router\";\r\nimport InfoBox from \"../components/InfoBox\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport \"../styles/flowchart.css\";\r\nimport mermaid from \"mermaid\";\r\n\r\nconst MarkdownFlowchart = ({ data }) => {\r\n  const location = useLocation();\r\n  const [info, setInfo] = useState({ title: \"\", text: \"\", link: \"\" });\r\n  const [markdownContent, setMarkdownContent] = useState(\r\n    data?.allMdx?.nodes?.[0]?.body || \"\"\r\n  );\r\n  const [infoData, setInfoData] = useState(\r\n    data?.allMdx?.nodes?.[0]?.frontmatter?.infoData || []\r\n  );\r\n  const mermaidContainerRef = useRef(null); // ðŸ‘ˆ Ref for Mermaid container\r\n  const [isHydrated, setIsHydrated] = useState(false); // ðŸ‘ˆ Track hydration\r\n\r\n  // Ensure content is updated when data changes\r\n  useEffect(() => {\r\n    setMarkdownContent(data?.allMdx?.nodes?.[0]?.body || \"\");\r\n    setInfoData(data?.allMdx?.nodes?.[0]?.frontmatter?.infoData || \"\");\r\n  }, [data]);\r\n\r\n  // Detect hydration\r\n  useEffect(() => {\r\n    setIsHydrated(true); // âœ… Mark the component as hydrated\r\n  }, []);\r\n\r\n  // Initialize Mermaid after hydration\r\n  useEffect(() => {\r\n    if (isHydrated && mermaidContainerRef.current) {\r\n      mermaid.initialize({ startOnLoad: false });\r\n\r\n      // Remove 'data-processed' attribute for proper rendering\r\n      mermaidContainerRef.current.removeAttribute(\"data-processed\");\r\n\r\n      setTimeout(() => {\r\n        mermaid.init(undefined, mermaidContainerRef.current); // âœ… Force render\r\n      }, 100);\r\n    }\r\n  }, [isHydrated, markdownContent]);\r\n\r\n  // Add custom listeners for interactivity\r\n  useEffect(() => {\r\n    const addCustomListeners = () => {\r\n      const nodes = document.querySelectorAll(\".hoverNode,.highlighted-node\");\r\n\r\n      nodes.forEach((node) => {\r\n        node.addEventListener(\"mouseover\", (event) => {\r\n          const nodeId = node.textContent.trim();\r\n          const nodeInfo = infoData.find((item) => item.id === nodeId);\r\n\r\n          if (nodeInfo) {\r\n            setInfo(nodeInfo);\r\n            const infoBox = document.getElementById(\"info-box\");\r\n            if (infoBox) {\r\n              infoBox.style.display = \"block\";\r\n              infoBox.style.left = `${event.clientX + 15}px`;\r\n              infoBox.style.top = `${event.clientY + 15}px`;\r\n            }\r\n          }\r\n        });\r\n\r\n        node.addEventListener(\"mousemove\", (event) => {\r\n          const infoBox = document.getElementById(\"info-box\");\r\n          if (infoBox) {\r\n            infoBox.style.left = `${event.clientX + 15}px`;\r\n            infoBox.style.top = `${event.clientY + 15}px`;\r\n          }\r\n        });\r\n\r\n        node.addEventListener(\"mouseout\", () => {\r\n          setInfo({ title: \"\", text: \"\", link: \"\" });\r\n          const infoBox = document.getElementById(\"info-box\");\r\n          if (infoBox) {\r\n            infoBox.style.display = \"none\";\r\n          }\r\n        });\r\n\r\n        node.addEventListener(\"click\", () => {\r\n          const nodeId = node.textContent.trim();\r\n          const nodeInfo = infoData.find((item) => item.id === nodeId);\r\n\r\n          if (nodeInfo?.link) {\r\n            window.location.href = nodeInfo.link;\r\n          }\r\n        });\r\n      });\r\n    };\r\n\r\n    setTimeout(addCustomListeners, 200);\r\n  }, [infoData]);\r\n\r\n  const parseMermaidContent = (content) => {\r\n    return content.replace(\"```mermaid\", \"\").replace(\"```\", \"\").trim();\r\n  };\r\n\r\n  return (\r\n    <div key={location.pathname}>\r\n      <Navbar />\r\n      <div className=\"flowchart-container\">\r\n        <h1 style={{ textAlign: \"center\", marginBottom: \"20px\" }}>Markdown Flowchart</h1>\r\n        <div className=\"mermaid-wrapper\">\r\n          {markdownContent ? (\r\n            <div\r\n              className=\"mermaid\"\r\n              ref={mermaidContainerRef}\r\n              dangerouslySetInnerHTML={{\r\n                __html: parseMermaidContent(markdownContent),\r\n              }}\r\n            ></div>\r\n          ) : (\r\n            <p style={{ textAlign: \"center\" }}>No content available.</p>\r\n          )}\r\n        </div>\r\n        <InfoBox info={info} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const query = graphql`\r\n  query {\r\n    allMdx(\r\n      filter: {\r\n        internal: { contentFilePath: { regex: \"/src/components/md/\" } }\r\n      }\r\n    ) {\r\n      nodes {\r\n        body\r\n        frontmatter {\r\n          infoData {\r\n            id\r\n            title\r\n            text\r\n            link\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default MarkdownFlowchart;\r\n"],"names":["info","className","id","style","display","title","text","fontSize","color","href","link","isDropdownOpen","setIsDropdownOpen","useState","to","onMouseEnter","onMouseLeave","data","location","useLocation","setInfo","markdownContent","setMarkdownContent","allMdx","nodes","body","infoData","setInfoData","frontmatter","mermaidContainerRef","useRef","isHydrated","setIsHydrated","useEffect","current","mermaid","initialize","startOnLoad","removeAttribute","setTimeout","init","undefined","document","querySelectorAll","forEach","node","addEventListener","event","nodeId","textContent","trim","nodeInfo","find","item","infoBox","getElementById","left","clientX","top","clientY","window","key","pathname","textAlign","marginBottom","ref","dangerouslySetInnerHTML","__html","content","replace"],"sourceRoot":""}