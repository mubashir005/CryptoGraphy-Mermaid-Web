{"version":3,"file":"545-cda9c2080a4d0211af8f.js","mappings":"oPAgBA,MAoBMA,EAAM,IAAI,EAChB,IAAIC,EAAU,CAAC,EACf,MAAMC,EAAO,CAAC,EACd,IAAIC,EAAS,CAAC,EACd,MA2KMC,EAAkB,CAACC,EAAUC,EAAeC,KAChD,MAAMC,EAAW,CACfC,GAAI,CACFC,GAAI,CACFC,MAAO,SAETC,IAAK,CACHC,MAAO,OACPC,KAAM,OACNC,KAAM,UAGVC,GAAI,CACFN,GAAI,CACFI,KAAM,QAERF,IAAK,CACHG,KAAM,QACNF,MAAO,QACPF,MAAO,SAGXM,GAAI,CACFP,GAAI,CACFK,KAAM,QAERH,IAAK,CACHE,KAAM,QACNH,MAAO,QACPE,MAAO,SAGXK,GAAI,CACFR,GAAI,CACFG,MAAO,SAETD,IAAK,CACHD,MAAO,OACPI,KAAM,OACND,KAAM,WAKZ,OADAN,EAASW,GAAKX,EAASC,GAChBD,EAASD,GAAgBD,GAAeD,EAAS,EAEpDe,EAAc,CAACC,EAAMf,EAAeC,KAExC,GADA,EAAAe,EAAIC,KAAK,cAAe,CAAEF,OAAMf,gBAAeC,oBAC1CN,EAAQoB,GACX,OAAQd,GACN,IAAK,KACL,IAAK,KACHN,EAAQoB,GAAQ,CACdG,WAAY,QACZC,YAAa,SAEf,MACF,IAAK,KACHxB,EAAQoB,GAAQ,CACdG,WAAY,QACZC,YAAa,SAEf,MACF,IAAK,KACHxB,EAAQoB,GAAQ,CACdG,WAAY,OACZC,YAAa,QAEf,MACF,IAAK,KACHxB,EAAQoB,GAAQ,CACdG,WAAY,OACZC,YAAa,QAKrB,MAAMC,EAA2B,OAAlBpB,EAAyBL,EAAQoB,GAAMG,WAAavB,EAAQoB,GAAMI,YAcjF,MAbsB,OAAlBnB,EACFL,EAAQoB,GAAMG,WAAapB,EACzBH,EAAQoB,GAAMG,WACdlB,EACAC,GAGFN,EAAQoB,GAAMI,YAAcrB,EAC1BH,EAAQoB,GAAMI,YACdnB,EACAC,GAGGmB,CAAM,EAoBTC,EAAW,SAASC,EAAOC,EAASC,EAAOC,GAC/C,EAAAT,EAAIC,KAAK,iBAAkBK,GAC3B,MAAMI,EAAWD,EAAIE,OAAO,KAAKC,KAAK,QAAS,cAC/C,IAEIC,EACAC,EAHAC,EAAY,CAAC,EACbC,EAAMT,EAAQU,GAAGC,eAGrB,QAA2B,IAAvBZ,EAAMO,aAAyB,CACjC,MAAMM,GAAgB,OAAmBb,EAAMO,cAC/CA,EAAeM,EAAcC,MAC7BN,EAAoBK,EAAcE,UACpC,CAyHA,OAxHAf,EAAMgB,SAAQ,SAASC,GACrB,MAAMC,EAAa,KAAOD,EAAKE,MAAQ,IAAMF,EAAKG,SACpB,IAA1BX,EAAUS,IACZT,EAAUS,GAAc,EACxB,EAAAxB,EAAIC,KAAK,kBAAmBuB,EAAYT,EAAUS,MAElDT,EAAUS,KACV,EAAAxB,EAAIC,KAAK,kBAAmBuB,EAAYT,EAAUS,KAEpD,IAAIG,EAASH,EAAa,IAAMT,EAAUS,GAC1C,EAAAxB,EAAIC,KAAK,kCAAmCuB,EAAYG,EAAQZ,EAAUS,IAC1E,MAAMI,EAAgB,MAAQL,EAAKE,MAC7BI,EAAc,MAAQN,EAAKG,IAC3BI,EAAW,CAAEV,MAAO,GAAIC,WAAY,IAS1C,OARAS,EAASC,OAASR,EAAKS,QAAU,EACf,eAAdT,EAAKU,KACPH,EAASI,UAAY,OAErBJ,EAASI,UAAY,SAEvBJ,EAASK,eAAiB,aAC1BL,EAASM,aAAe,aAChBb,EAAKU,MACX,IAAK,qBACHH,EAASK,eAAiB,cAC5B,IAAK,cACHL,EAASM,aAAe,cACxB,MACF,IAAK,qBACHN,EAASK,eAAiB,cAC5B,IAAK,cACHL,EAASM,aAAe,cACxB,MACF,IAAK,sBACHN,EAASK,eAAiB,eAC5B,IAAK,eACHL,EAASM,aAAe,eAG5B,IAAIhB,EAAQ,GACRC,EAAa,GACjB,OAAQE,EAAKc,QACX,IAAK,SACHjB,EAAQ,kBACa,IAAjBP,IACFO,EAAQP,QAEgB,IAAtBC,IACFO,EAAaP,GAEfgB,EAASQ,UAAY,SACrBR,EAASS,QAAU,QACnB,MACF,IAAK,SACHT,EAASQ,UAAY,SACrBR,EAASS,QAAU,SACnBT,EAASV,MAAQ,iDACjB,MACF,IAAK,QACHU,EAASQ,UAAY,QACrBR,EAASS,QAAU,QACnBT,EAASV,MAAQ,iCAGrB,QAAmB,IAAfG,EAAKH,MAAkB,CACzB,MAAMoB,GAAU,OAAmBjB,EAAKH,OACxCA,EAAQoB,EAAQpB,MAChBC,EAAamB,EAAQnB,UACvB,CACAS,EAASV,MAAQU,EAASV,OAASA,EACnCU,EAAST,WAAaS,EAAST,YAAcA,OACpB,IAArBE,EAAKkB,YACPX,EAASY,OAAQ,OAAmBnB,EAAKkB,YAAa,YAChB,IAA7BnC,EAAMqC,mBACfb,EAASY,OAAQ,OAAmBpC,EAAMqC,mBAAoB,OAE9Db,EAASY,OAAQ,OAAmB9D,EAAK8D,MAAO,YAEhC,IAAdnB,EAAKqB,UACY,IAAfrB,EAAKH,QACPU,EAASe,eAAiB,eAG5Bf,EAASe,eAAiB,aAC1Bf,EAASgB,SAAW,KAEtBhB,EAASiB,UAAYxB,EAAKwB,UAC1BjB,EAASkB,MAAQzB,EAAKqB,KAAKK,QAAQ,IAAOC,eAAgB,WACvC,IAAf3B,EAAKH,QACPU,EAASV,MAAQU,EAASV,OAAS,gDAErCU,EAAST,WAAaS,EAAST,WAAW4B,QAAQ,SAAU,SAC5DnB,EAASqB,GAAKxB,EACdG,EAASsB,QAAU,kBAAoBxB,EAAgB,IAAMC,EAC7D,MAAMwB,GAAU,OAAgB3C,EAAUoB,IACpC,OAAEwB,EAAM,OAAEC,EAAM,SAAEC,EAAQ,SAAEC,GA7HT,EAAClC,EAAMP,KAClC,IAAIsC,EAAS/B,EAAKE,MACd8B,EAAShC,EAAKG,IAClB,MAAM8B,EAAWF,EACXG,EAAWF,EACXG,EAAY7E,EAAOyE,GACnBK,EAAU9E,EAAO0E,GACvB,OAAKG,GAAcC,GAGI,YAAnBD,EAAUzB,OACZqB,EAAS,GAAGA,KAAUxD,EAAYwD,EAAQ,MAAOtC,MAE9B,YAAjB2C,EAAQ1B,OACVsB,EAAS,GAAGA,KAAUzD,EAAYyD,EAAQ,KAAMvC,MAE3C,CAAEsC,SAAQC,SAAQC,WAAUC,aAR1B,CAAEH,SAAQC,SAQ0B,EA6GIK,CAAqBrC,EAAMP,GAC1E,EAAAhB,EAAI6D,MAAM,0BAA2BP,EAAQC,GAC7C/C,EAAMF,MAAMwD,KAAK,CACfX,GAAI,IAAM5B,EAAKE,MAAQF,EAAKG,IAC5BqC,QAAS,CAACT,GACVU,QAAS,CAACT,GACVC,WACAC,WACAJ,UACAY,OAAQ,CACN,CACEC,MAAOpC,EAASoC,MAChBC,OAAQrC,EAASqC,OACjBC,SAAUtC,EAASoC,MACnBG,UAAWvC,EAASqC,OACpBvB,KAAMd,EAASkB,MACfsB,cAAe,CACb,oBAAqB,OACrB,uBAAwB,YAI9BxC,YAEJ,IACOtB,CACT,EAmCM+D,EAAa,SAASC,EAAKC,EAAMC,GACrC,MAAMC,EA3dmB,EAACC,EAAKC,EAAKC,KACpC,MAAM,WAAEC,GAAeD,EACjBE,EAA0B,IAAIC,IACpC,IAAIC,EAAYN,EAChB,KAAOM,GAAW,CAEhB,GADAF,EAAQG,IAAID,GACRA,IAAcL,EAChB,OAAOK,EAETA,EAAYH,EAAWG,EACzB,CAEA,IADAA,EAAYL,EACLK,GAAW,CAChB,GAAIF,EAAQI,IAAIF,GACd,OAAOA,EAETA,EAAYH,EAAWG,EACzB,CACA,MAAO,MAAM,EAycIG,CAAmBb,EAAKC,EAAMC,GAC/C,QAAiB,IAAbC,GAAoC,SAAbA,EACzB,MAAO,CAAEW,EAAG,EAAGC,EAAG,GAEpB,MAAMC,EAAiB3G,EAAO8F,GAAUc,OACxC,MAAO,CAAEH,EAAGE,EAAeE,KAAMH,EAAGC,EAAeG,KACrD,EACMC,EAAa,SAASC,EAAStE,EAAMO,EAAUvB,EAASmE,EAAgBvB,GAC5E,MAAMsC,EAASlB,EAAWhD,EAAKiC,SAAUjC,EAAKkC,SAAUiB,GAClDF,EAAMjD,EAAKuE,SAAS,GAAGC,WACvBtB,EAAOlD,EAAKuE,SAAS,GAAGE,SAExBC,GADW1E,EAAKuE,SAAS,GAAGI,WAAa3E,EAAKuE,SAAS,GAAGI,WAAa,IAClDC,KAAKC,GAAY,CAACA,EAAQd,EAAIG,EAAOH,EAAGc,EAAQb,EAAIE,EAAOF,KAChFc,EAAS,CACb,CAAC7B,EAAIc,EAAIG,EAAOH,EAAGd,EAAIe,EAAIE,EAAOF,MAC/BU,EACH,CAACxB,EAAKa,EAAIG,EAAOH,EAAGb,EAAKc,EAAIE,EAAOF,KAEhC,EAAED,EAAC,EAAEC,IAAM,OAA2BhE,EAAKO,UAC3CY,GAAQ,WAAO4C,EAAEA,GAAGC,EAAEA,GAAG7C,MAAM,OAC/B4D,EAAWT,EAAQlF,OAAO,QAAQC,KAAK,IAAK8B,EAAM2D,IAASzF,KAAK,QAAS,QAAUkB,EAASsB,SAASxC,KAAK,OAAQ,QAClH2F,EAAQV,EAAQlF,OAAO,KAAKC,KAAK,QAAS,aAC1C4F,GAAgB,QAAOD,EAAMxG,OAAO0G,YAAYlF,EAAK8B,UACrDqD,EAAMF,EAAczG,OAAO4G,WAAWC,wBAC5CJ,EAAc5F,KAAK,QAAS8F,EAAIxC,OAChCsC,EAAc5F,KAAK,SAAU8F,EAAIvC,QACjCoC,EAAM3F,KACJ,YACA,aAAaW,EAAK0C,OAAO,GAAGqB,EAAIG,EAAOH,MAAM/D,EAAK0C,OAAO,GAAGsB,EAAIE,EAAOF,MA/DlD,SAASsB,EAAS/E,EAAUgF,EAAaC,EAAqB5D,GACrF,IAAI6D,EAAM,GACND,IACFC,EAAMC,OAAOC,SAASC,SAAW,KAAOF,OAAOC,SAASE,KAAOH,OAAOC,SAASG,SAAWJ,OAAOC,SAASI,OAC1GN,EAAMA,EAAI/D,QAAQ,MAAO,OACzB+D,EAAMA,EAAI/D,QAAQ,MAAO,SAE3B,OAAe4D,EAAS/E,EAAUkF,EAAK7D,EAAI2D,EAC7C,CAyDES,CAAiBjB,EAAUxE,EAAUvB,EAAQ0B,KAAM1B,EAAQwG,oBAAqB5D,EAClF,EACMqE,EAAiB,CAACC,EAAW/C,KACjC+C,EAAUnG,SAASvB,IACZA,EAAK2H,WACR3H,EAAK2H,SAAW,IAElB,MAAMC,EAAWjD,EAAekD,aAAa7H,EAAKoD,IAC9CwE,GACFA,EAASrG,SAASuG,IAChB9H,EAAK2H,SAAS5D,KAAKjF,EAAOgJ,GAAS,IAGvCL,EAAezH,EAAK2H,SAAUhD,EAAe,GAC7C,EA2GEoD,EAAY,CAACC,EAAMC,EAAMP,EAAWhH,EAAKwH,EAAa1H,EAAS2H,KACnET,EAAUnG,SAAQ,SAASvB,GACzB,GAAIA,EAUF,GATAlB,EAAOkB,EAAKoD,IAAIsC,OAAS,CACvBC,KAAM3F,EAAKuF,EAAIyC,EACfpC,KAAM5F,EAAKwF,EAAIyC,EACf1C,EAAGyC,EACHxC,EAAGyC,EACHE,QACAhE,MAAOnE,EAAKmE,MACZC,OAAQpE,EAAKoE,QAEG,UAAdpE,EAAKkC,KAAkB,CACzB,MAAMkG,EAAaF,EAAYtH,OAAO,KAAKC,KAAK,QAAS,YACzDuH,EAAWxH,OAAO,QAAQC,KAAK,QAAS,yBAA2BsH,EAAQ,EAAI,SAAStH,KAAK,IAAKb,EAAKuF,EAAIyC,GAAMnH,KAAK,IAAKb,EAAKwF,EAAIyC,GAAMpH,KAAK,QAASb,EAAKmE,OAAOtD,KAAK,SAAUb,EAAKoE,QACxL,MAAMnB,EAAQmF,EAAWxH,OAAO,KAAKC,KAAK,QAAS,SAC7CwH,GAAiB,SAAYC,UAAUC,WAAavI,EAAKwI,UAAUrE,MAAQ,EAAI,EACrFlB,EAAMpC,KACJ,YACA,aAAab,EAAKkE,OAAO,GAAGqB,EAAIyC,EAAOhI,EAAKuF,EAAI8C,MAAmBrI,EAAKkE,OAAO,GAAGsB,EAAIyC,EAAOjI,EAAKwF,EAAI,MAExGvC,EAAMjD,OAAO0G,YAAY1G,EAAKwI,UAAUC,WACxC,EAAAxI,EAAIC,KAAK,aAAcF,EAAKkC,KAAMlC,EAAKkE,OACzC,MACE,EAAAjE,EAAIC,KAAK,aAAcF,EAAKoD,IAC5BpD,EAAK0I,GAAG7H,KACN,YACA,aAAab,EAAKuF,EAAIyC,EAAOhI,EAAKmE,MAAQ,MAAMnE,EAAKwF,EAAIyC,EAAOjI,EAAKoE,OAAS,KAItF,IACAsD,EAAUnG,SAAQ,SAASvB,GACrBA,GAAsB,UAAdA,EAAKkC,MACf6F,EAAUC,EAAOhI,EAAKuF,EAAG0C,EAAOjI,EAAKwF,EAAGxF,EAAK2H,SAAUjH,EAAKwH,EAAa1H,EAAS2H,EAAQ,EAE9F,GAAE,EAEEQ,EAAW,CACfC,WAxNiB,SAAS/F,EAAMrC,GAEhC,OADA,EAAAP,EAAIC,KAAK,sBACFM,EAAQU,GAAG0H,YACpB,EAsNEC,KAjJWC,eAAejG,EAAMO,EAAI2F,EAAUvI,GAC9C,IAAIwI,EACJxI,EAAQU,GAAG+H,QACXnK,EAAS,CAAC,EACVF,EAAU,CAAC,EACX4B,EAAQU,GAAGgI,OAAO,SAClB1I,EAAQ2I,OAAOC,MAAMvG,GACrB,MAAMwG,GAAW,QAAO,QAAQC,OAAO,OAAOzI,KAAK,QAAS,gBAAgBA,KAAK,KAAM,MACvF,IAAIJ,EAAQ,CACV2C,GAAI,OACJmB,cAAe,CACb,wBAAyB,mBACzB,0BAA2B,6CAC3B,4CAA6C,KAE7C,gBAAiB,QAInBoD,SAAU,GACVpH,MAAO,IAIT,OAFA,EAAAN,EAAIC,KAAK,sCAAuCvB,GACtC6B,EAAQU,GAAGC,gBAEnB,IAAK,KACHV,EAAM8D,cAAc,iBAAmB,KACvC,MACF,IAAK,KACH9D,EAAM8D,cAAc,iBAAmB,OACvC,MACF,IAAK,KACH9D,EAAM8D,cAAc,iBAAmB,QACvC,MACF,IAAK,KACH9D,EAAM8D,cAAc,iBAAmB,OAG3C,MAAM,cAAEgF,EAAejB,UAAWkB,IAAU,SAC5C,IAAIC,EACkB,YAAlBF,IACFE,GAAiB,QAAO,KAAOrG,IAEjC,MAAMsG,EAAyB,YAAlBH,GAA8B,QAAOE,EAAeE,QAAQ,GAAGC,gBAAgBC,OAAQ,QAAO,QACrGC,EAAwB,YAAlBP,EAA8BE,EAAeE,QAAQ,GAAGC,gBAAkBG,SAChFrJ,EAAMgJ,EAAKM,OAAO,QAAQ5G,QAEhC,OAAc1C,EADE,CAAC,QAAS,SAAU,SACRF,EAAQ0B,KAAMkB,GAC1C,MAAM6G,EAAOzJ,EAAQU,GAAGgJ,cACxB,IAAIC,EACJ,MAAMC,EAAY5J,EAAQU,GAAGmJ,eAC7B,EAAApK,EAAIC,KAAK,eAAgBkK,GACzB,IAAK,IAAIE,EAAIF,EAAUnI,OAAS,EAAGqI,GAAK,EAAGA,IACzCH,EAAOC,EAAUE,GACjB9J,EAAQU,GAAGqJ,UACTJ,EAAK/G,GACL,CAAEP,KAAMsH,EAAKK,MAAOtI,KAAMiI,EAAKnH,WAC/B,aACA,EACAmH,EAAK9G,QACL8G,EAAKlJ,KAGT,MAAMwJ,EAAc/J,EAAIE,OAAO,KAAKC,KAAK,QAAS,aAC5C8D,EApIa,SAAS+F,GAC5B,MAAM/F,EAAiB,CAAEK,WAAY,CAAC,EAAG6C,aAAc,CAAC,GAClD8C,EAAYD,EAAIL,eAiBtB,OAhBA,EAAApK,EAAIC,KAAK,eAAgByK,GACzBA,EAAUpJ,SAAQ,SAASqJ,GACzBA,EAASjB,MAAMpI,SAAQ,SAASvB,GAC9B2E,EAAeK,WAAWhF,GAAQ4K,EAASxH,QACM,IAA7CuB,EAAekD,aAAa+C,EAASxH,MACvCuB,EAAekD,aAAa+C,EAASxH,IAAM,IAE7CuB,EAAekD,aAAa+C,EAASxH,IAAIW,KAAK/D,EAChD,GACF,IACA2K,EAAUpJ,SAAQ,SAASqJ,GAClBA,EAASxH,QAC+B,IAA3CuB,EAAeK,WAAW4F,EAASxH,KACrCuB,EAAeK,WAAW4F,EAASxH,GAEvC,IACOuB,CACT,CAgHyBkG,CAAarK,EAAQU,IAC5CT,QAljBkBqI,eAAemB,EAAMa,EAAOpB,EAAMI,EAAKtJ,EAASmE,EAAgBlE,GAClF,MACMkJ,EADMD,EAAKM,OAAO,QAAQc,OACdlK,OAAO,KAAKC,KAAK,QAAS,SACtCkK,EAAOC,OAAOD,KAAKd,GAsKzB,aArKMgB,QAAQC,IACZH,EAAK3E,KAAI0C,eAAe1F,GACtB,MAAM+H,EAASlB,EAAK7G,GACpB,IAAIgI,EAAW,UACXD,EAAO9H,QAAQpB,OAAS,IAC1BmJ,EAAWD,EAAO9H,QAAQgI,KAAK,MAEjCD,GAAsB,mBACtB,MAAM3I,GAAU,OAAmB0I,EAAOG,QAC1C,IAAIC,OAA6B,IAAhBJ,EAAOtI,KAAkBsI,EAAOtI,KAAOsI,EAAO/H,GAC/D,MAAMoF,EAAY,CAAErE,MAAO,EAAGC,OAAQ,GAChCoH,EAAQ,CACZ,CACEpI,GAAI+H,EAAO/H,GAAK,QAChBmB,cAAe,CACb,YAAa,SAGjB,CACEnB,GAAI+H,EAAO/H,GAAK,QAChBmB,cAAe,CACb,YAAa,SAGjB,CACEnB,GAAI+H,EAAO/H,GAAK,SAChBmB,cAAe,CACb,YAAa,UAGjB,CACEnB,GAAI+H,EAAO/H,GAAK,SAChBmB,cAAe,CACb,YAAa,WAInB,IAAIkH,EAAS,EACTC,EAAS,GACTnH,EAAgB,CAAC,EACrB,OAAQ4G,EAAOjJ,MACb,IAAK,QACHuJ,EAAS,EACTC,EAAS,OACT,MACF,IAAK,SA6CL,IAAK,QAML,QACEA,EAAS,aAjDX,IAAK,UACHA,EAAS,WACTnH,EAAgB,CACdoH,gBAAiB,cAEnB,MACF,IAAK,UACHD,EAAS,UACT,MACF,IAAK,MAeL,IAAK,YACHA,EAAS,sBACT,MAdF,IAAK,aACHA,EAAS,aACT,MACF,IAAK,YACHA,EAAS,YACT,MACF,IAAK,YACHA,EAAS,YACT,MACF,IAAK,gBACHA,EAAS,gBACT,MAIF,IAAK,SACHA,EAAS,SACT,MACF,IAAK,UACHA,EAAS,UACT,MACF,IAAK,UACHA,EAAS,UACT,MACF,IAAK,aACHA,EAAS,aACT,MACF,IAAK,WACHA,EAAS,WACT,MAIF,IAAK,eACHA,EAAS,eAKb,MAAM1L,EAAO,CACXsB,WAAYmB,EAAQnB,WACpBsK,MAAOF,EACPG,UAAWN,EACXvI,UAAWmI,EAAOnI,UAClB8I,GAAIL,EACJM,GAAIN,EACJO,MAAOZ,EACP/J,MAAOoB,EAAQpB,MACf+B,GAAI+H,EAAO/H,GACX6I,KAAMd,EAAOc,KACbC,WAAYf,EAAOe,WACnBC,QAAS3L,EAAQU,GAAGkL,WAAWjB,EAAO/H,KAAO,GAC7CiJ,MAAO7L,EAAQU,GAAGoL,YAAYnB,EAAO/H,IACrCmJ,aAAcpB,EAAOoB,aACrBpI,MAAuB,UAAhBgH,EAAOjJ,KAAmB,SAAM,EACvCjB,IAAKkK,EAAOlK,IACZiB,KAAMiJ,EAAOjJ,KACbsK,MAAOrB,EAAOqB,MACdC,SAAS,SAAYnE,UAAUmE,SAEjC,IAAIC,EACAC,EACJ,GAAkB,UAAd3M,EAAKkC,KACPyK,QAAe,OAAWhD,EAAO3J,EAAMmL,EAAOlK,KAC9CyL,EAAcC,EAAO3M,OAAO4M,cACvB,CACL9C,EAAI+C,gBAAgB,6BAA8B,QAClD,MAAM,SAAEC,EAAQ,KAAEC,SAAe,IAAA9M,GAAY0J,EAAO3J,OAAM,GAAQ,GAClEwI,EAAUrE,MAAQ4I,EAAK5I,MACvBqE,EAAUwE,eAAgB,SAAY1E,UAAU0E,cAChDxE,EAAUpE,OAAS2I,EAAK3I,OACxBoE,EAAUC,UAAYqE,EAAS9M,OAC/BA,EAAKwI,UAAYA,CACnB,CACA,MAAMyE,EAAO,CACX7J,GAAI+H,EAAO/H,GACXoI,MAAuB,YAAhBL,EAAOjJ,KAAqBsJ,EAAQ,GAG3CjH,gBACAsH,UAAWN,EACX/C,YASA6D,MAAO7L,EAAQU,GAAGoL,YAAYnB,EAAO/H,IAErCe,MAAsB,MAAfuI,OAAsB,EAASA,EAAYvI,MAClDC,OAAuB,MAAfsI,OAAsB,EAASA,EAAYtI,OAEnDlC,KAAMiJ,EAAOjJ,KAIbwG,GAAIiE,EACJO,OAAQvI,EAAeK,WAAWmG,EAAO/H,KAE3CtE,EAAOkB,EAAKoD,IAAM6J,CACpB,KAEKxM,CACT,CAwYgB0M,CAAYlD,EAAM7G,EAAIsG,EAAMI,EAAKtJ,EAASmE,EAAgBlE,GACxE,MAAMqF,EAAUpF,EAAIE,OAAO,KAAKC,KAAK,QAAS,kBACxCN,EAAQC,EAAQU,GAAGkM,WACzB3M,EAAQH,EAASC,EAAOC,EAASC,EAAOC,GAC1BsK,OAAOD,KAAKjM,GACpByC,SAAS8L,IACb,MAAMrN,EAAOlB,EAAOuO,GACfrN,EAAKkN,QACRzM,EAAMkH,SAAS5D,KAAK/D,QAEsB,IAAxC2E,EAAekD,aAAawF,KAC9BrN,EAAKkE,OAAS,CACZ,CACErB,KAAM7C,EAAK6L,UACXtH,cAAe,CACb,uBAAwB,6BAE1BJ,MAAOnE,EAAKwI,UAAUrE,MACtBC,OAAQpE,EAAKwI,UAAUpE,gBAKpBpE,EAAKuF,SACLvF,EAAKwF,SACLxF,EAAKmE,aACLnE,EAAKoE,OACd,IAEFqD,EAAehH,EAAMkH,SAAUhD,GAC/B,EAAA1E,EAAIC,KAAK,eAAgBoN,KAAKC,UAAU9M,EAAO,KAAM,IACrD,MAAM+M,QAAU7O,EAAI8O,OAAOhN,GAC3BsH,EAAU,EAAG,EAAGyF,EAAE7F,SAAUjH,EAAK+J,EAAajK,EAAS,GACvD,EAAAP,EAAIC,KAAK,eAAgBsN,GACP,OAAjBxE,EAAKwE,EAAEjN,QAA0ByI,EAAG5C,KAAK5E,IACxCqE,EAAWC,EAAStE,EAAMA,EAAKO,SAAUvB,EAASmE,EAAgBvB,EAAG,KAEvE,OAAkB,CAAC,EAAG1C,EAAK8I,EAAMkE,eAAgBlE,EAAMmE,aACvDtE,EAASuE,QACX,GAmKMtC,EA5GauC,GAAY,8BACZA,EAAQC,2BACdD,EAAQE,eAAiBF,EAAQG,uDAGlCH,EAAQI,yDAGPJ,EAAQI,uDAITJ,EAAQE,eAAiBF,EAAQG,0BAChCH,EAAQE,eAAiBF,EAAQG,oHAQlCH,EAAQK,yBACNL,EAAQM,+KAYVN,EAAQO,4DAINP,EAAQQ,iFAKRR,EAAQQ,6EAKER,EAAQS,mFAGNT,EAAQS,qCACpBT,EAAQS,6FAMVT,EAAQU,4BACNV,EAAQW,+EAKVX,EAAQI,qDAIPJ,EAAQI,qDAGRJ,EAAQI,+JAQFJ,EAAQC,sDAETD,EAAQY,yCACFZ,EAAQa,8KASpBb,EAAQG,oNAvGA,CAACH,IACnB,IAAI9H,EAAW,GACf,IAAK,IAAIuE,EAAI,EAAGA,EAAI,EAAGA,IACrBvE,GAAY,yBACMuE,sBACNuD,EAAQ,UAAUvD,0BAChBuD,EAAQ,cAAcvD,uBAItC,OAAOvE,CAAQ,EA4Gb4I,CAAYd,OAGVe,EAAU,CACd1N,GAAE,IACFyH,WACAQ,OAAM,IACNmC,S","sources":["webpack://cryptography-website/./node_modules/mermaid/dist/flowchart-elk-definition-4a651766.js"],"sourcesContent":["import { d as db, p as parser } from \"./flowDb-956e92f1.js\";\nimport { select, curveLinear, line } from \"d3\";\nimport { a as insertMarkers, e as insertNode, l as labelHelper, f as insertEdgeLabel, k as getLineFunctionsWithOffset, m as addEdgeMarkers } from \"./edges-e0da2a9e.js\";\nimport { l as log, F as getConfig, o as setupGraphViewbox, k as getStylesFromArray, n as interpolateToCurve, e as common } from \"./mermaid-b5860b54.js\";\nimport ELK from \"elkjs/lib/elk.bundled.js\";\nimport \"./createText-2e5e7dd3.js\";\nimport \"mdast-util-from-markdown\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nconst findCommonAncestor = (id1, id2, treeData) => {\n  const { parentById } = treeData;\n  const visited = /* @__PURE__ */ new Set();\n  let currentId = id1;\n  while (currentId) {\n    visited.add(currentId);\n    if (currentId === id2) {\n      return currentId;\n    }\n    currentId = parentById[currentId];\n  }\n  currentId = id2;\n  while (currentId) {\n    if (visited.has(currentId)) {\n      return currentId;\n    }\n    currentId = parentById[currentId];\n  }\n  return \"root\";\n};\nconst elk = new ELK();\nlet portPos = {};\nconst conf = {};\nlet nodeDb = {};\nconst addVertices = async function(vert, svgId, root, doc, diagObj, parentLookupDb, graph) {\n  const svg = root.select(`[id=\"${svgId}\"]`);\n  const nodes = svg.insert(\"g\").attr(\"class\", \"nodes\");\n  const keys = Object.keys(vert);\n  await Promise.all(\n    keys.map(async function(id) {\n      const vertex = vert[id];\n      let classStr = \"default\";\n      if (vertex.classes.length > 0) {\n        classStr = vertex.classes.join(\" \");\n      }\n      classStr = classStr + \" flowchart-label\";\n      const styles2 = getStylesFromArray(vertex.styles);\n      let vertexText = vertex.text !== void 0 ? vertex.text : vertex.id;\n      const labelData = { width: 0, height: 0 };\n      const ports = [\n        {\n          id: vertex.id + \"-west\",\n          layoutOptions: {\n            \"port.side\": \"WEST\"\n          }\n        },\n        {\n          id: vertex.id + \"-east\",\n          layoutOptions: {\n            \"port.side\": \"EAST\"\n          }\n        },\n        {\n          id: vertex.id + \"-south\",\n          layoutOptions: {\n            \"port.side\": \"SOUTH\"\n          }\n        },\n        {\n          id: vertex.id + \"-north\",\n          layoutOptions: {\n            \"port.side\": \"NORTH\"\n          }\n        }\n      ];\n      let radius = 0;\n      let _shape = \"\";\n      let layoutOptions = {};\n      switch (vertex.type) {\n        case \"round\":\n          radius = 5;\n          _shape = \"rect\";\n          break;\n        case \"square\":\n          _shape = \"rect\";\n          break;\n        case \"diamond\":\n          _shape = \"question\";\n          layoutOptions = {\n            portConstraints: \"FIXED_SIDE\"\n          };\n          break;\n        case \"hexagon\":\n          _shape = \"hexagon\";\n          break;\n        case \"odd\":\n          _shape = \"rect_left_inv_arrow\";\n          break;\n        case \"lean_right\":\n          _shape = \"lean_right\";\n          break;\n        case \"lean_left\":\n          _shape = \"lean_left\";\n          break;\n        case \"trapezoid\":\n          _shape = \"trapezoid\";\n          break;\n        case \"inv_trapezoid\":\n          _shape = \"inv_trapezoid\";\n          break;\n        case \"odd_right\":\n          _shape = \"rect_left_inv_arrow\";\n          break;\n        case \"circle\":\n          _shape = \"circle\";\n          break;\n        case \"ellipse\":\n          _shape = \"ellipse\";\n          break;\n        case \"stadium\":\n          _shape = \"stadium\";\n          break;\n        case \"subroutine\":\n          _shape = \"subroutine\";\n          break;\n        case \"cylinder\":\n          _shape = \"cylinder\";\n          break;\n        case \"group\":\n          _shape = \"rect\";\n          break;\n        case \"doublecircle\":\n          _shape = \"doublecircle\";\n          break;\n        default:\n          _shape = \"rect\";\n      }\n      const node = {\n        labelStyle: styles2.labelStyle,\n        shape: _shape,\n        labelText: vertexText,\n        labelType: vertex.labelType,\n        rx: radius,\n        ry: radius,\n        class: classStr,\n        style: styles2.style,\n        id: vertex.id,\n        link: vertex.link,\n        linkTarget: vertex.linkTarget,\n        tooltip: diagObj.db.getTooltip(vertex.id) || \"\",\n        domId: diagObj.db.lookUpDomId(vertex.id),\n        haveCallback: vertex.haveCallback,\n        width: vertex.type === \"group\" ? 500 : void 0,\n        dir: vertex.dir,\n        type: vertex.type,\n        props: vertex.props,\n        padding: getConfig().flowchart.padding\n      };\n      let boundingBox;\n      let nodeEl;\n      if (node.type !== \"group\") {\n        nodeEl = await insertNode(nodes, node, vertex.dir);\n        boundingBox = nodeEl.node().getBBox();\n      } else {\n        doc.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n        const { shapeSvg, bbox } = await labelHelper(nodes, node, void 0, true);\n        labelData.width = bbox.width;\n        labelData.wrappingWidth = getConfig().flowchart.wrappingWidth;\n        labelData.height = bbox.height;\n        labelData.labelNode = shapeSvg.node();\n        node.labelData = labelData;\n      }\n      const data = {\n        id: vertex.id,\n        ports: vertex.type === \"diamond\" ? ports : [],\n        // labelStyle: styles.labelStyle,\n        // shape: _shape,\n        layoutOptions,\n        labelText: vertexText,\n        labelData,\n        // labels: [{ text: vertexText }],\n        // rx: radius,\n        // ry: radius,\n        // class: classStr,\n        // style: styles.style,\n        // link: vertex.link,\n        // linkTarget: vertex.linkTarget,\n        // tooltip: diagObj.db.getTooltip(vertex.id) || '',\n        domId: diagObj.db.lookUpDomId(vertex.id),\n        // haveCallback: vertex.haveCallback,\n        width: boundingBox == null ? void 0 : boundingBox.width,\n        height: boundingBox == null ? void 0 : boundingBox.height,\n        // dir: vertex.dir,\n        type: vertex.type,\n        // props: vertex.props,\n        // padding: getConfig().flowchart.padding,\n        // boundingBox,\n        el: nodeEl,\n        parent: parentLookupDb.parentById[vertex.id]\n      };\n      nodeDb[node.id] = data;\n    })\n  );\n  return graph;\n};\nconst getNextPosition = (position, edgeDirection, graphDirection) => {\n  const portPos2 = {\n    TB: {\n      in: {\n        north: \"north\"\n      },\n      out: {\n        south: \"west\",\n        west: \"east\",\n        east: \"south\"\n      }\n    },\n    LR: {\n      in: {\n        west: \"west\"\n      },\n      out: {\n        east: \"south\",\n        south: \"north\",\n        north: \"east\"\n      }\n    },\n    RL: {\n      in: {\n        east: \"east\"\n      },\n      out: {\n        west: \"north\",\n        north: \"south\",\n        south: \"west\"\n      }\n    },\n    BT: {\n      in: {\n        south: \"south\"\n      },\n      out: {\n        north: \"east\",\n        east: \"west\",\n        west: \"north\"\n      }\n    }\n  };\n  portPos2.TD = portPos2.TB;\n  return portPos2[graphDirection][edgeDirection][position];\n};\nconst getNextPort = (node, edgeDirection, graphDirection) => {\n  log.info(\"getNextPort\", { node, edgeDirection, graphDirection });\n  if (!portPos[node]) {\n    switch (graphDirection) {\n      case \"TB\":\n      case \"TD\":\n        portPos[node] = {\n          inPosition: \"north\",\n          outPosition: \"south\"\n        };\n        break;\n      case \"BT\":\n        portPos[node] = {\n          inPosition: \"south\",\n          outPosition: \"north\"\n        };\n        break;\n      case \"RL\":\n        portPos[node] = {\n          inPosition: \"east\",\n          outPosition: \"west\"\n        };\n        break;\n      case \"LR\":\n        portPos[node] = {\n          inPosition: \"west\",\n          outPosition: \"east\"\n        };\n        break;\n    }\n  }\n  const result = edgeDirection === \"in\" ? portPos[node].inPosition : portPos[node].outPosition;\n  if (edgeDirection === \"in\") {\n    portPos[node].inPosition = getNextPosition(\n      portPos[node].inPosition,\n      edgeDirection,\n      graphDirection\n    );\n  } else {\n    portPos[node].outPosition = getNextPosition(\n      portPos[node].outPosition,\n      edgeDirection,\n      graphDirection\n    );\n  }\n  return result;\n};\nconst getEdgeStartEndPoint = (edge, dir) => {\n  let source = edge.start;\n  let target = edge.end;\n  const sourceId = source;\n  const targetId = target;\n  const startNode = nodeDb[source];\n  const endNode = nodeDb[target];\n  if (!startNode || !endNode) {\n    return { source, target };\n  }\n  if (startNode.type === \"diamond\") {\n    source = `${source}-${getNextPort(source, \"out\", dir)}`;\n  }\n  if (endNode.type === \"diamond\") {\n    target = `${target}-${getNextPort(target, \"in\", dir)}`;\n  }\n  return { source, target, sourceId, targetId };\n};\nconst addEdges = function(edges, diagObj, graph, svg) {\n  log.info(\"abc78 edges = \", edges);\n  const labelsEl = svg.insert(\"g\").attr(\"class\", \"edgeLabels\");\n  let linkIdCnt = {};\n  let dir = diagObj.db.getDirection();\n  let defaultStyle;\n  let defaultLabelStyle;\n  if (edges.defaultStyle !== void 0) {\n    const defaultStyles = getStylesFromArray(edges.defaultStyle);\n    defaultStyle = defaultStyles.style;\n    defaultLabelStyle = defaultStyles.labelStyle;\n  }\n  edges.forEach(function(edge) {\n    const linkIdBase = \"L-\" + edge.start + \"-\" + edge.end;\n    if (linkIdCnt[linkIdBase] === void 0) {\n      linkIdCnt[linkIdBase] = 0;\n      log.info(\"abc78 new entry\", linkIdBase, linkIdCnt[linkIdBase]);\n    } else {\n      linkIdCnt[linkIdBase]++;\n      log.info(\"abc78 new entry\", linkIdBase, linkIdCnt[linkIdBase]);\n    }\n    let linkId = linkIdBase + \"-\" + linkIdCnt[linkIdBase];\n    log.info(\"abc78 new link id to be used is\", linkIdBase, linkId, linkIdCnt[linkIdBase]);\n    const linkNameStart = \"LS-\" + edge.start;\n    const linkNameEnd = \"LE-\" + edge.end;\n    const edgeData = { style: \"\", labelStyle: \"\" };\n    edgeData.minlen = edge.length || 1;\n    if (edge.type === \"arrow_open\") {\n      edgeData.arrowhead = \"none\";\n    } else {\n      edgeData.arrowhead = \"normal\";\n    }\n    edgeData.arrowTypeStart = \"arrow_open\";\n    edgeData.arrowTypeEnd = \"arrow_open\";\n    switch (edge.type) {\n      case \"double_arrow_cross\":\n        edgeData.arrowTypeStart = \"arrow_cross\";\n      case \"arrow_cross\":\n        edgeData.arrowTypeEnd = \"arrow_cross\";\n        break;\n      case \"double_arrow_point\":\n        edgeData.arrowTypeStart = \"arrow_point\";\n      case \"arrow_point\":\n        edgeData.arrowTypeEnd = \"arrow_point\";\n        break;\n      case \"double_arrow_circle\":\n        edgeData.arrowTypeStart = \"arrow_circle\";\n      case \"arrow_circle\":\n        edgeData.arrowTypeEnd = \"arrow_circle\";\n        break;\n    }\n    let style = \"\";\n    let labelStyle = \"\";\n    switch (edge.stroke) {\n      case \"normal\":\n        style = \"fill:none;\";\n        if (defaultStyle !== void 0) {\n          style = defaultStyle;\n        }\n        if (defaultLabelStyle !== void 0) {\n          labelStyle = defaultLabelStyle;\n        }\n        edgeData.thickness = \"normal\";\n        edgeData.pattern = \"solid\";\n        break;\n      case \"dotted\":\n        edgeData.thickness = \"normal\";\n        edgeData.pattern = \"dotted\";\n        edgeData.style = \"fill:none;stroke-width:2px;stroke-dasharray:3;\";\n        break;\n      case \"thick\":\n        edgeData.thickness = \"thick\";\n        edgeData.pattern = \"solid\";\n        edgeData.style = \"stroke-width: 3.5px;fill:none;\";\n        break;\n    }\n    if (edge.style !== void 0) {\n      const styles2 = getStylesFromArray(edge.style);\n      style = styles2.style;\n      labelStyle = styles2.labelStyle;\n    }\n    edgeData.style = edgeData.style += style;\n    edgeData.labelStyle = edgeData.labelStyle += labelStyle;\n    if (edge.interpolate !== void 0) {\n      edgeData.curve = interpolateToCurve(edge.interpolate, curveLinear);\n    } else if (edges.defaultInterpolate !== void 0) {\n      edgeData.curve = interpolateToCurve(edges.defaultInterpolate, curveLinear);\n    } else {\n      edgeData.curve = interpolateToCurve(conf.curve, curveLinear);\n    }\n    if (edge.text === void 0) {\n      if (edge.style !== void 0) {\n        edgeData.arrowheadStyle = \"fill: #333\";\n      }\n    } else {\n      edgeData.arrowheadStyle = \"fill: #333\";\n      edgeData.labelpos = \"c\";\n    }\n    edgeData.labelType = edge.labelType;\n    edgeData.label = edge.text.replace(common.lineBreakRegex, \"\\n\");\n    if (edge.style === void 0) {\n      edgeData.style = edgeData.style || \"stroke: #333; stroke-width: 1.5px;fill:none;\";\n    }\n    edgeData.labelStyle = edgeData.labelStyle.replace(\"color:\", \"fill:\");\n    edgeData.id = linkId;\n    edgeData.classes = \"flowchart-link \" + linkNameStart + \" \" + linkNameEnd;\n    const labelEl = insertEdgeLabel(labelsEl, edgeData);\n    const { source, target, sourceId, targetId } = getEdgeStartEndPoint(edge, dir);\n    log.debug(\"abc78 source and target\", source, target);\n    graph.edges.push({\n      id: \"e\" + edge.start + edge.end,\n      sources: [source],\n      targets: [target],\n      sourceId,\n      targetId,\n      labelEl,\n      labels: [\n        {\n          width: edgeData.width,\n          height: edgeData.height,\n          orgWidth: edgeData.width,\n          orgHeight: edgeData.height,\n          text: edgeData.label,\n          layoutOptions: {\n            \"edgeLabels.inline\": \"true\",\n            \"edgeLabels.placement\": \"CENTER\"\n          }\n        }\n      ],\n      edgeData\n    });\n  });\n  return graph;\n};\nconst addMarkersToEdge = function(svgPath, edgeData, diagramType, arrowMarkerAbsolute, id) {\n  let url = \"\";\n  if (arrowMarkerAbsolute) {\n    url = window.location.protocol + \"//\" + window.location.host + window.location.pathname + window.location.search;\n    url = url.replace(/\\(/g, \"\\\\(\");\n    url = url.replace(/\\)/g, \"\\\\)\");\n  }\n  addEdgeMarkers(svgPath, edgeData, url, id, diagramType);\n};\nconst getClasses = function(text, diagObj) {\n  log.info(\"Extracting classes\");\n  return diagObj.db.getClasses();\n};\nconst addSubGraphs = function(db2) {\n  const parentLookupDb = { parentById: {}, childrenById: {} };\n  const subgraphs = db2.getSubGraphs();\n  log.info(\"Subgraphs - \", subgraphs);\n  subgraphs.forEach(function(subgraph) {\n    subgraph.nodes.forEach(function(node) {\n      parentLookupDb.parentById[node] = subgraph.id;\n      if (parentLookupDb.childrenById[subgraph.id] === void 0) {\n        parentLookupDb.childrenById[subgraph.id] = [];\n      }\n      parentLookupDb.childrenById[subgraph.id].push(node);\n    });\n  });\n  subgraphs.forEach(function(subgraph) {\n    ({ id: subgraph.id });\n    if (parentLookupDb.parentById[subgraph.id] !== void 0) {\n      parentLookupDb.parentById[subgraph.id];\n    }\n  });\n  return parentLookupDb;\n};\nconst calcOffset = function(src, dest, parentLookupDb) {\n  const ancestor = findCommonAncestor(src, dest, parentLookupDb);\n  if (ancestor === void 0 || ancestor === \"root\") {\n    return { x: 0, y: 0 };\n  }\n  const ancestorOffset = nodeDb[ancestor].offset;\n  return { x: ancestorOffset.posX, y: ancestorOffset.posY };\n};\nconst insertEdge = function(edgesEl, edge, edgeData, diagObj, parentLookupDb, id) {\n  const offset = calcOffset(edge.sourceId, edge.targetId, parentLookupDb);\n  const src = edge.sections[0].startPoint;\n  const dest = edge.sections[0].endPoint;\n  const segments = edge.sections[0].bendPoints ? edge.sections[0].bendPoints : [];\n  const segPoints = segments.map((segment) => [segment.x + offset.x, segment.y + offset.y]);\n  const points = [\n    [src.x + offset.x, src.y + offset.y],\n    ...segPoints,\n    [dest.x + offset.x, dest.y + offset.y]\n  ];\n  const { x, y } = getLineFunctionsWithOffset(edge.edgeData);\n  const curve = line().x(x).y(y).curve(curveLinear);\n  const edgePath = edgesEl.insert(\"path\").attr(\"d\", curve(points)).attr(\"class\", \"path \" + edgeData.classes).attr(\"fill\", \"none\");\n  const edgeG = edgesEl.insert(\"g\").attr(\"class\", \"edgeLabel\");\n  const edgeWithLabel = select(edgeG.node().appendChild(edge.labelEl));\n  const box = edgeWithLabel.node().firstChild.getBoundingClientRect();\n  edgeWithLabel.attr(\"width\", box.width);\n  edgeWithLabel.attr(\"height\", box.height);\n  edgeG.attr(\n    \"transform\",\n    `translate(${edge.labels[0].x + offset.x}, ${edge.labels[0].y + offset.y})`\n  );\n  addMarkersToEdge(edgePath, edgeData, diagObj.type, diagObj.arrowMarkerAbsolute, id);\n};\nconst insertChildren = (nodeArray, parentLookupDb) => {\n  nodeArray.forEach((node) => {\n    if (!node.children) {\n      node.children = [];\n    }\n    const childIds = parentLookupDb.childrenById[node.id];\n    if (childIds) {\n      childIds.forEach((childId) => {\n        node.children.push(nodeDb[childId]);\n      });\n    }\n    insertChildren(node.children, parentLookupDb);\n  });\n};\nconst draw = async function(text, id, _version, diagObj) {\n  var _a;\n  diagObj.db.clear();\n  nodeDb = {};\n  portPos = {};\n  diagObj.db.setGen(\"gen-2\");\n  diagObj.parser.parse(text);\n  const renderEl = select(\"body\").append(\"div\").attr(\"style\", \"height:400px\").attr(\"id\", \"cy\");\n  let graph = {\n    id: \"root\",\n    layoutOptions: {\n      \"elk.hierarchyHandling\": \"INCLUDE_CHILDREN\",\n      \"org.eclipse.elk.padding\": \"[top=100, left=100, bottom=110, right=110]\",\n      \"elk.layered.spacing.edgeNodeBetweenLayers\": \"30\",\n      // 'elk.layered.mergeEdges': 'true',\n      \"elk.direction\": \"DOWN\"\n      // 'elk.ports.sameLayerEdges': true,\n      // 'nodePlacement.strategy': 'SIMPLE',\n    },\n    children: [],\n    edges: []\n  };\n  log.info(\"Drawing flowchart using v3 renderer\", elk);\n  let dir = diagObj.db.getDirection();\n  switch (dir) {\n    case \"BT\":\n      graph.layoutOptions[\"elk.direction\"] = \"UP\";\n      break;\n    case \"TB\":\n      graph.layoutOptions[\"elk.direction\"] = \"DOWN\";\n      break;\n    case \"LR\":\n      graph.layoutOptions[\"elk.direction\"] = \"RIGHT\";\n      break;\n    case \"RL\":\n      graph.layoutOptions[\"elk.direction\"] = \"LEFT\";\n      break;\n  }\n  const { securityLevel, flowchart: conf2 } = getConfig();\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const doc = securityLevel === \"sandbox\" ? sandboxElement.nodes()[0].contentDocument : document;\n  const svg = root.select(`[id=\"${id}\"]`);\n  const markers = [\"point\", \"circle\", \"cross\"];\n  insertMarkers(svg, markers, diagObj.type, id);\n  const vert = diagObj.db.getVertices();\n  let subG;\n  const subGraphs = diagObj.db.getSubGraphs();\n  log.info(\"Subgraphs - \", subGraphs);\n  for (let i = subGraphs.length - 1; i >= 0; i--) {\n    subG = subGraphs[i];\n    diagObj.db.addVertex(\n      subG.id,\n      { text: subG.title, type: subG.labelType },\n      \"group\",\n      void 0,\n      subG.classes,\n      subG.dir\n    );\n  }\n  const subGraphsEl = svg.insert(\"g\").attr(\"class\", \"subgraphs\");\n  const parentLookupDb = addSubGraphs(diagObj.db);\n  graph = await addVertices(vert, id, root, doc, diagObj, parentLookupDb, graph);\n  const edgesEl = svg.insert(\"g\").attr(\"class\", \"edges edgePath\");\n  const edges = diagObj.db.getEdges();\n  graph = addEdges(edges, diagObj, graph, svg);\n  const nodes = Object.keys(nodeDb);\n  nodes.forEach((nodeId) => {\n    const node = nodeDb[nodeId];\n    if (!node.parent) {\n      graph.children.push(node);\n    }\n    if (parentLookupDb.childrenById[nodeId] !== void 0) {\n      node.labels = [\n        {\n          text: node.labelText,\n          layoutOptions: {\n            \"nodeLabels.placement\": \"[H_CENTER, V_TOP, INSIDE]\"\n          },\n          width: node.labelData.width,\n          height: node.labelData.height\n          // width: 100,\n          // height: 100,\n        }\n      ];\n      delete node.x;\n      delete node.y;\n      delete node.width;\n      delete node.height;\n    }\n  });\n  insertChildren(graph.children, parentLookupDb);\n  log.info(\"after layout\", JSON.stringify(graph, null, 2));\n  const g = await elk.layout(graph);\n  drawNodes(0, 0, g.children, svg, subGraphsEl, diagObj, 0);\n  log.info(\"after layout\", g);\n  (_a = g.edges) == null ? void 0 : _a.map((edge) => {\n    insertEdge(edgesEl, edge, edge.edgeData, diagObj, parentLookupDb, id);\n  });\n  setupGraphViewbox({}, svg, conf2.diagramPadding, conf2.useMaxWidth);\n  renderEl.remove();\n};\nconst drawNodes = (relX, relY, nodeArray, svg, subgraphsEl, diagObj, depth) => {\n  nodeArray.forEach(function(node) {\n    if (node) {\n      nodeDb[node.id].offset = {\n        posX: node.x + relX,\n        posY: node.y + relY,\n        x: relX,\n        y: relY,\n        depth,\n        width: node.width,\n        height: node.height\n      };\n      if (node.type === \"group\") {\n        const subgraphEl = subgraphsEl.insert(\"g\").attr(\"class\", \"subgraph\");\n        subgraphEl.insert(\"rect\").attr(\"class\", \"subgraph subgraph-lvl-\" + depth % 5 + \" node\").attr(\"x\", node.x + relX).attr(\"y\", node.y + relY).attr(\"width\", node.width).attr(\"height\", node.height);\n        const label = subgraphEl.insert(\"g\").attr(\"class\", \"label\");\n        const labelCentering = getConfig().flowchart.htmlLabels ? node.labelData.width / 2 : 0;\n        label.attr(\n          \"transform\",\n          `translate(${node.labels[0].x + relX + node.x + labelCentering}, ${node.labels[0].y + relY + node.y + 3})`\n        );\n        label.node().appendChild(node.labelData.labelNode);\n        log.info(\"Id (UGH)= \", node.type, node.labels);\n      } else {\n        log.info(\"Id (UGH)= \", node.id);\n        node.el.attr(\n          \"transform\",\n          `translate(${node.x + relX + node.width / 2}, ${node.y + relY + node.height / 2})`\n        );\n      }\n    }\n  });\n  nodeArray.forEach(function(node) {\n    if (node && node.type === \"group\") {\n      drawNodes(relX + node.x, relY + node.y, node.children, svg, subgraphsEl, diagObj, depth + 1);\n    }\n  });\n};\nconst renderer = {\n  getClasses,\n  draw\n};\nconst genSections = (options) => {\n  let sections = \"\";\n  for (let i = 0; i < 5; i++) {\n    sections += `\n      .subgraph-lvl-${i} {\n        fill: ${options[`surface${i}`]};\n        stroke: ${options[`surfacePeer${i}`]};\n      }\n    `;\n  }\n  return sections;\n};\nconst getStyles = (options) => `.label {\n    font-family: ${options.fontFamily};\n    color: ${options.nodeTextColor || options.textColor};\n  }\n  .cluster-label text {\n    fill: ${options.titleColor};\n  }\n  .cluster-label span {\n    color: ${options.titleColor};\n  }\n\n  .label text,span {\n    fill: ${options.nodeTextColor || options.textColor};\n    color: ${options.nodeTextColor || options.textColor};\n  }\n\n  .node rect,\n  .node circle,\n  .node ellipse,\n  .node polygon,\n  .node path {\n    fill: ${options.mainBkg};\n    stroke: ${options.nodeBorder};\n    stroke-width: 1px;\n  }\n\n  .node .label {\n    text-align: center;\n  }\n  .node.clickable {\n    cursor: pointer;\n  }\n\n  .arrowheadPath {\n    fill: ${options.arrowheadColor};\n  }\n\n  .edgePath .path {\n    stroke: ${options.lineColor};\n    stroke-width: 2.0px;\n  }\n\n  .flowchart-link {\n    stroke: ${options.lineColor};\n    fill: none;\n  }\n\n  .edgeLabel {\n    background-color: ${options.edgeLabelBackground};\n    rect {\n      opacity: 0.85;\n      background-color: ${options.edgeLabelBackground};\n      fill: ${options.edgeLabelBackground};\n    }\n    text-align: center;\n  }\n\n  .cluster rect {\n    fill: ${options.clusterBkg};\n    stroke: ${options.clusterBorder};\n    stroke-width: 1px;\n  }\n\n  .cluster text {\n    fill: ${options.titleColor};\n  }\n\n  .cluster span {\n    color: ${options.titleColor};\n  }\n  /* .cluster div {\n    color: ${options.titleColor};\n  } */\n\n  div.mermaidTooltip {\n    position: absolute;\n    text-align: center;\n    max-width: 200px;\n    padding: 2px;\n    font-family: ${options.fontFamily};\n    font-size: 12px;\n    background: ${options.tertiaryColor};\n    border: 1px solid ${options.border2};\n    border-radius: 2px;\n    pointer-events: none;\n    z-index: 100;\n  }\n\n  .flowchartTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${options.textColor};\n  }\n  .subgraph {\n    stroke-width:2;\n    rx:3;\n  }\n  // .subgraph-lvl-1 {\n  //   fill:#ccc;\n  //   // stroke:black;\n  // }\n\n  .flowchart-label text {\n    text-anchor: middle;\n  }\n\n  ${genSections(options)}\n`;\nconst styles = getStyles;\nconst diagram = {\n  db,\n  renderer,\n  parser,\n  styles\n};\nexport {\n  diagram\n};\n"],"names":["elk","portPos","conf","nodeDb","getNextPosition","position","edgeDirection","graphDirection","portPos2","TB","in","north","out","south","west","east","LR","RL","BT","TD","getNextPort","node","l","info","inPosition","outPosition","result","addEdges","edges","diagObj","graph","svg","labelsEl","insert","attr","defaultStyle","defaultLabelStyle","linkIdCnt","dir","db","getDirection","defaultStyles","style","labelStyle","forEach","edge","linkIdBase","start","end","linkId","linkNameStart","linkNameEnd","edgeData","minlen","length","type","arrowhead","arrowTypeStart","arrowTypeEnd","stroke","thickness","pattern","styles2","interpolate","curve","defaultInterpolate","text","arrowheadStyle","labelpos","labelType","label","replace","lineBreakRegex","id","classes","labelEl","source","target","sourceId","targetId","startNode","endNode","getEdgeStartEndPoint","debug","push","sources","targets","labels","width","height","orgWidth","orgHeight","layoutOptions","calcOffset","src","dest","parentLookupDb","ancestor","id1","id2","treeData","parentById","visited","Set","currentId","add","has","findCommonAncestor","x","y","ancestorOffset","offset","posX","posY","insertEdge","edgesEl","sections","startPoint","endPoint","segPoints","bendPoints","map","segment","points","edgePath","edgeG","edgeWithLabel","appendChild","box","firstChild","getBoundingClientRect","svgPath","diagramType","arrowMarkerAbsolute","url","window","location","protocol","host","pathname","search","addMarkersToEdge","insertChildren","nodeArray","children","childIds","childrenById","childId","drawNodes","relX","relY","subgraphsEl","depth","subgraphEl","labelCentering","flowchart","htmlLabels","labelData","labelNode","el","renderer","getClasses","draw","async","_version","_a","clear","setGen","parser","parse","renderEl","append","securityLevel","conf2","sandboxElement","root","nodes","contentDocument","body","doc","document","select","vert","getVertices","subG","subGraphs","getSubGraphs","i","addVertex","title","subGraphsEl","db2","subgraphs","subgraph","addSubGraphs","svgId","keys","Object","Promise","all","vertex","classStr","join","styles","vertexText","ports","radius","_shape","portConstraints","shape","labelText","rx","ry","class","link","linkTarget","tooltip","getTooltip","domId","lookUpDomId","haveCallback","props","padding","boundingBox","nodeEl","getBBox","createElementNS","shapeSvg","bbox","wrappingWidth","data","parent","addVertices","getEdges","nodeId","JSON","stringify","g","layout","diagramPadding","useMaxWidth","remove","options","fontFamily","nodeTextColor","textColor","titleColor","mainBkg","nodeBorder","arrowheadColor","lineColor","edgeLabelBackground","clusterBkg","clusterBorder","tertiaryColor","border2","genSections","diagram"],"sourceRoot":""}